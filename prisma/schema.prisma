generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  sessions         Session[]
  accounts         Account[]
  preference       Preference[]
  Category         Category[]
  Budget           Budget[]
  CashFlowForecast CashFlowForecast[]

  @@unique([email])
  @@map("user")
}

model Preference {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key       String
  value     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([userId, key])
  @@map("preference")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  user_id      String
  date         DateTime
  description  String
  amount       Float
  type         TransactionType
  category     String
  status       TransactionStatus
  account      String
  is_recurring Boolean
  frequency    Frequency? // Optional
  notes        String? // Optional
  Category     Category?         @relation(fields: [categoryId], references: [id])
  categoryId   String?

  @@map("transactions") // optional: maps to a specific table name
}

enum TransactionType {
  income
  expense
}

enum TransactionStatus {
  pending
  completed
}

enum Frequency {
  weekly
  biweekly
  monthly
  quarterly
  semi_annually
  annually
}

model Category {
  id           String        @id @default(cuid())
  name         String
  transactions Transaction[]
  budgets      Budget[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Budget {
  id         String   @id @default(cuid())
  amount     Decimal
  start_date DateTime
  end_date   DateTime
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CashFlowForecast {
  id              String   @id @default(cuid())
  opening_balance Decimal
  cash_in         Decimal
  cash_out        Decimal
  closing_balance Decimal
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  created_at      DateTime @default(now())
}
